Необходимо реализовать прототип файрвола.

В стандартный ввод подаётся информация о пакетах. Каждая строчка -- один пакет. Формат строки: разделённые пробелами IP адреса источника и назначения, порты источника и назначения (в сетевом порядке байт), протокол (6 для TCP, 17 для UDP). Например:

	10.0.1.12 1.1.1.1 14640 5000 6
	1.1.1.1 10.0.1.12 5000 14640 6

Гарантируется корректность входных данных, тем не менее корректная обработка некоторых ошибок приветствуется.

Также дана база данных файрвола. Правила в ней просматриваются сверху вниз. Если пакет попадает под какое-либо правило, то следующие правила не рассматриваются и для пакета выносится соответствующий вердикт (accept или drop). Если не одно правило не подошло, выносится вердикт по умолчанию -- drop.

База данных может быть записана статически в коде любым удобным образом. Приветствуется предусмотренные возможности для лёгкого изменения набора правил. Правила приведены далее.

	src: 10.0.1.11  	dst: 1.1.1.1 	proto: tcp 	=> ACCEPT
	src: 10.0.2.12  	dst: 1.1.1.1 	proto: tcp 	=> DROP
	src: 10.0.2.12  	dst: 8.8.8.8 	proto: tcp	=> ACCEPT

	src: 10.0.3.13 									=> ACCEPT
						dst: 1.2.3.4 	proto: udp	=> DROP
						dst: 1.2.3.4				=> ACCEPT

						dst: 10.0.9.1	proto: tcp	=> DROP
	src: 10.0.5.0/24 								=> ACCEPT

Требования к коду:
- Лёгкость чтения. Стиль и оформление кода согласно общепринятым практикам.
- Функциональное тестирование. Не обязательно делать это при помощи фреймворков тестирования. Достаточно любым образом показать, что программа запускается и для входных данных выдаёт ожидаемый результат, например при помощи bash скрипта.
- Приветствуется предусмотренные возможности для дальнейшей модификации кода, однако не следует переусердствовать в этом направлении.

Для сдачи задания нужно опубликовать исходный код в каком-либо публичном git репозитории (e.g. github/gitlab/gitea). В репозитории должно быть:
- Файлы исходного кода на С (не C++).
- Файлы системы сборки: желательно Make или CMake.
- Примеры входных данных, подаваемых на вход программе (можно объединить с тестами).
- Примеры вывода программы для примеров из предыдущего пункта.
- Readme, в котором описано где какие файлы и инструкция по сборке и тестовому запуску.
- Любые другие файлы используемые программой, либо необходимыми для лучшего её понимания.

Дополнительные задания. Рекомендуется приступать к ним только после того, как будет закончена основная часть задания.
1. Создать в программе второй набор правил (любой). В зависимости от аргумента коммандной строки использовать первый или второй набор.
2. Добавить фльтрацию по портам TCP/UDP. Добавить соответствующие правила (любые).
3. Добавить возможность обработки других протоколов, кроме TCP/UDP.
4. Сделать загрузку базы правил из файла.
5. Сделать генератор случайных "пакетов", информацию с которого можно подавать на сделанный файрвол через stdin/stdout

